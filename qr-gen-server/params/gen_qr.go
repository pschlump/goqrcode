package ApiQRGen

// Generated Code!  Do not hand modify.
// Generated by req_param tool.

import (
	"fmt"
	"log"
	"net/http"
	"strconv"

	"github.com/pschlump/filelib"
	"github.com/pschlump/godebug"
)

type ApiDataType struct {
	Fmt    string
	Invert bool
	Size   int
	Url    string
}

func ParsePOSTParams(www http.ResponseWriter, req *http.Request) (rv ApiDataType, methodPost bool, err error) {

	if req.Method == "POST" {
		methodPost = true
		var s string
		var b bool
		var n64 int64

		_, _ = b, n64

		req.ParseForm()

		// --------------------------------------------------------------------
		// Parameter: fmt
		// Method: POST
		// --------------------------------------------------------------------
		s = req.Form.Get("fmt")

		if s == "" {
			s = "png" // Apply Defaulit Value
		}

		rv.Fmt = s

		// --------------------------------------------------------------------
		// Parameter: invert
		// Method: POST
		// --------------------------------------------------------------------
		s = req.Form.Get("invert")

		if s == "" {
			s = "false" // Apply Defaulit Value
		}

		b, err = ParseBool(s)
		if err != nil {
			log.Printf("Url Param 'invert' is invalid boolean: %s\n", err)
			www.WriteHeader(http.StatusBadRequest) // 400
			fmt.Fprintf(www, "Url Param 'invert' is invalid boolean, %s\n", err)
			err = fmt.Errorf("Url Param 'invert' is invalid boolean, %s", err)
			return
		}

		rv.Invert = b

		// --------------------------------------------------------------------
		// Parameter: size
		// Method: POST
		// --------------------------------------------------------------------
		s = req.Form.Get("size")

		if s == "" {
			s = "256" // Apply Defaulit Value
		}

		n64, err = strconv.ParseInt(s, 10, 64)
		if err != nil {
			log.Printf("Url Param 'size' is invalid integer: %s\n", err)
			www.WriteHeader(http.StatusBadRequest) // 400
			fmt.Fprintf(www, "Url Param 'size' is invalid integer, %s\n", err)
			err = fmt.Errorf("Url Param 'size' is invalid integer, %s", err)
			return
		}
		rv.Size = int(n64)

		// --------------------------------------------------------------------
		// Parameter: url
		// Method: POST
		// --------------------------------------------------------------------
		s = req.Form.Get("url")

		rv.Url = s

	}
	return
}

func ParseGETParams(www http.ResponseWriter, req *http.Request) (rv ApiDataType, methodPost bool, err error) {

	if req.Method == "GET" {
		methodPost = true
		var s string
		var sA []string
		var b, ok bool
		var n64 int64
		params := req.URL.Query()
		_, _, _ = b, n64, ok

		// --------------------------------------------------------------------
		// Parameter: fmt
		// Method: GET
		// --------------------------------------------------------------------
		sA, ok = params["fmt"]

		s = ""
		if ok && len(sA) >= 1 {
			s = sA[0]
		}

		if !ok || len(sA) == 0 {
			s = "png" // Apply Defaulit Value
		}

		rv.Fmt = s

		// --------------------------------------------------------------------
		// Parameter: invert
		// Method: GET
		// --------------------------------------------------------------------
		sA, ok = params["invert"]

		s = ""
		if ok && len(sA) >= 1 {
			s = sA[0]
		}

		if !ok || len(sA) == 0 {
			s = "false" // Apply Defaulit Value
		}

		b, err = ParseBool(s)
		if err != nil {
			log.Printf("Url Param 'invert' is invalid boolean: %s\n", err)
			www.WriteHeader(http.StatusBadRequest) // 400
			fmt.Fprintf(www, "Url Param 'invert' is invalid boolean, %s\n", err)
			err = fmt.Errorf("Url Param 'invert' is invalid boolean, %s", err)
			return
		}

		rv.Invert = b

		// --------------------------------------------------------------------
		// Parameter: size
		// Method: GET
		// --------------------------------------------------------------------
		sA, ok = params["size"]

		s = ""
		if ok && len(sA) >= 1 {
			s = sA[0]
		}

		if !ok || len(sA) == 0 {
			s = "256" // Apply Defaulit Value
		}

		n64, err = strconv.ParseInt(s, 10, 64)
		if err != nil {
			log.Printf("Url Param 'size' is invalid integer: %s\n", err)
			www.WriteHeader(http.StatusBadRequest) // 400
			fmt.Fprintf(www, "Url Param 'size' is invalid integer, %s\n", err)
			err = fmt.Errorf("Url Param 'size' is invalid integer, %s", err)
			return
		}
		rv.Size = int(n64)

		// --------------------------------------------------------------------
		// Parameter: url
		// Method: GET
		// --------------------------------------------------------------------
		sA, ok = params["url"]

		fmt.Printf("sA(url) = %s %v, params=%s\n", sA, ok, params)

		s = ""
		if ok && len(sA) >= 1 {
			s = sA[0]
		}

		rv.Url = s

	}
	return
}

func ParseParams(www http.ResponseWriter, req *http.Request, validMethod ...string) (rv ApiDataType, err error) {
	fmt.Printf("********************************* Ype Yep\n")
	if (req.Method == "GET" || req.Method == "DELETE") && filelib.InArray(req.Method, validMethod) {
		fmt.Printf("AT: %s\n", godebug.LF())
		rv, _, err = ParseGETParams(www, req)
	} else if (req.Method == "POST" || req.Method == "PUT") && filelib.InArray(req.Method, validMethod) {
		fmt.Printf("AT: %s\n", godebug.LF())
		rv, _, err = ParsePOSTParams(www, req)
	} else {
		www.WriteHeader(http.StatusMethodNotAllowed) // 405
		fmt.Fprintf(www, "Invalid Method: %s\n", req.Method)
		err = fmt.Errorf("Invalid Method: %s", req.Method)
		return
	}
	return
}

var trueValues map[string]bool

func init() {
	trueValues = make(map[string]bool)

	trueValues["t"] = true
	trueValues["T"] = true
	trueValues["yes"] = true
	trueValues["Yes"] = true
	trueValues["YES"] = true
	trueValues["1"] = true
	trueValues["true"] = true
	trueValues["True"] = true
	trueValues["TRUE"] = true
	trueValues["on"] = true
	trueValues["On"] = true
	trueValues["ON"] = true

	trueValues["f"] = false
	trueValues["F"] = false
	trueValues["no"] = false
	trueValues["No"] = false
	trueValues["NO"] = false
	trueValues["0"] = false
	trueValues["false"] = false
	trueValues["False"] = false
	trueValues["FALSE"] = false
	trueValues["off"] = false
	trueValues["Off"] = false
	trueValues["OFF"] = false
}

func ParseBool(s string) (b bool, err error) {
	v, ok := trueValues[s]
	if ok {
		b = v
		return
	}
	err = fmt.Errorf("Invalid Boolean Value")
	return
}
